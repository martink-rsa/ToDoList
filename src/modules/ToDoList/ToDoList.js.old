/* eslint-disable no-restricted-syntax */
const taskInterface = (state) => ({
  type: 'taskInterface',
  add: () => state.add(state),
});

const task = (title, desc, createDate, dueDate, priority, notes, checklist) => {
  const proto = {
    type: 'Task',
    title,
    desc,
    createDate,
    dueDate,
    priority,
    notes,
    checklist,
  };
  const basics = taskInterface(proto);
  const composite = Object.assign({}, basics);
  return Object.assign(Object.create(composite), { title, desc, createDate, dueDate, priority, notes, checklist });
  // return Object.assign(Object.create(proto), { title, desc });
};

const project = (title, desc) => {
  const tasks = [];
  const proto = {
    title,
    desc,
    addTask(item) {
      console.log(item);
      console.log(Object.getPrototypeOf())
      // for (item of this.tasks) {
      if (Object.getPrototypeOf(item).type === 'taskInterface') {
        console.log('test');
      } else {
        throw new Error('This is not a taskInterface object');
      }
      // }
      console.log(item);
      tasks.push(item);
    },
  };
  return Object.assign(Object.create(proto), { title, desc });
};

const taskOutput = (item) => {
  const proto = {
    HTML() {
      return `
        <h1>
          Item: ${item.title};
        </h1>`;
    },
  };
  return Object.assign(Object.create(proto), { item });
};

const ToDoList = () => {
  const newProject = project('Main', 'School projects');
  const newTask = task('Study', 'Finish chapter 4', '1900/01/01', '2019/09/30', 5, 'Finish before Wednesday', ['Bio', 'Math']);
  console.log({ newTask });
  const output = taskOutput(newTask);
  console.log(output.HTML());
  newProject.addTask(newTask);
};

export default ToDoList;
